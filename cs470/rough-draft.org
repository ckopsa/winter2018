#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+LATEX_HEADER: \usepackage[backend=biber,style=ieee,citestyle=numeric-comp]{biblatex}
#+LATEX_HEADER: \usepackage{palatino}
#+LATEX_HEADER: \usepackage{url}
#+LATEX_HEADER: \addbibresource{manuscript.bib}
#+LaTeX_CLASS: article
#+TITLE: zergRush : An Android Rootkit
#+DATE: <2018-02-15 Tue>
#+AUTHOR: Colton Kopsa
#+EMAIL: kop14002@byui.edu
#+LANGUAGE: en
#+CREATOR: Emacs 25.3.1 (Org mode 9.1.6)

Within the field of malware exists the desire to obtain root privileges to a
system, and the malware built to accomplish this was originally known as
/rootkits/. cite:sec With root access, the user can do virtually anything they
want in a system. cite:sec This malware has found use in the Android operating
system, allowing users to gain more freedom with there devices at the cost of
security. The /zergRush/ malware was able to provide root access to all Android
phones using version 2.2 (Frozen Yogurt) and 2.3 (Gingerbread) by means of the
buffer overflow and use-after-free vulnerabilities. cite:issue

The buffer overflow vulnerability used by /zergRush/ was found in the
/FrameworkListener::dispatchCommand()/ from the /libsysutils/ library.
cite:issue. This function allowed the user to input commands that would then be
dispatched for execution. cite:vuln However, when copying a string from a
command entered by the user into a local c-string, the halting condition
required a 0-terminating c-string, but did not perform proper bounds checking on
the input provided. cite:vuln /zergRush/ was able to exploit this function by
overflowing the buffer and using Return Oriented Programming to point to
arbitrary code that was stored on the heap. cite:rev,cve,email

* Return Oriented Programming
  Modern operating systems implement countermeasures called data execution
  prevention (DEP) to prevent hackers from adding arbitrary code to a stack
  through user input. cite:prandini12_retur_orien_progr It does this by marking
  a memory range (like what stores a user's input) as nonexecutable.
  cite:prandini12_retur_orien_progr To thwart that protection, hackers use
  Return Oriented Programming. cite:prandini12_retur_orien_progr "ROP takes its
  name from the RETN assembly instruction, the most important one for code
  executed via a stack-overflow attack because it's responsible for driving the
  process control out of the attacked process flow."
  cite:prandini12_retur_orien_progr "For this property, each instruction
  sequence ending in the IA32 instruction “RETN” is called a /gadget/."
  cite:prandini12_retur_orien_progr By chaining these ROP gadgets together, it
  is possible to execute virtually any program.
** How it was used in /zergRush/
   /zergRush/ searches through the stack to find the necessary ROP gadgets to
   take control of the program execution. cite:rev In
   /FrameworkListener::dispatchCommand()/, /zergRush/ uses buffer overflow on
   the data array argument to write over the original return pointer with the
   start of the ROP gadget chain. cite:issue,vuln,rev The ROP gadget chain sends
   execution of the program to the heap where the arbitrary malicious code is
   stored. cite:rev The running of this code provides the user root privileges.
   cite:rev
   
   #+caption: /find_rop_gadgets()/ comment block from zergRush.c 
   #+BEGIN_SRC C
     /*
      ,* add sp, #108 -> b01b
      ,* pop	{r4, r5, r6, r7, pc} -> bdf0
      ,*
      ,* pop	{r0, pc} -> bd01
      ,*/
   #+END_SRC
   cite:rev 
   
* Use-after-free
  The ability of /zergRush/ to execute code on the heap was made possible by
  means of a use-after-free vulnerability. cite:cve This vulnerability can exist
  when memory on the heap is freed, but a pointer continues to reference the
  freed memory. "Referencing memory after it has been freed can cause a program
  to crash, use unexpected values, or execute code." cite:cwe A typical example
  of this weakness can be as follows: "The memory in question is allocated to
  another pointer validly at some point after it has been freed. The original
  pointer to the freed memory is used again and points to somewhere within the
  new allocation. As the data is changed, it corrupts the validly used memory;
  this induces undefined behavior in the process." cite:cwe In the event that a
  class is stored on the heap, its function pointers are also stored on the
  heap. "If one of these function pointers is overwritten with an address to
  valid shellcode, execution of arbitrary code can be achieved." cite:cwe It is
  important to note that a use-after-free vulnerability can precede a buffer
  overflow vulnerability, like in the case of /zergRush/. cite:cwe
  
   #+caption: Example of /free-after-use/ vulnerability
   #+BEGIN_SRC C
     // Dynamic memory is allocated
     char* ptr = (char*)malloc (SIZE);
     if (err) {
       abrt = 1;
       // Dynamic memory is freed
       free(ptr);

      }
     ...
     if (abrt) {
       // Dynamic memory is referenced after being freed
       logError("operation aborted before commit", ptr);

     }
   #+END_SRC
   cite:cwe 
** How it was used in /zergRush/
   Within the source code of /zergRush/ exists this comment: "Exploited by
   rewriting a /FrameworkCommand/ object making the /runCommand/ point to our
   first ROP gadget." cite:rev Android's /FrameworkCommands/ are stored on the
   heap. cite:vuln Because this data is stored on the heap, /zergRush/ checks
   the registers r9, r10, and fp to determine if any of them contain a valid
   address to the heap. cite:rev When the /FrameworkCommands/ are freed,
   /zergRush/ keeps the pointer to its malicious /FrameworkCommand/, and when
   the ROP gadgets send the execution of the program to the heap the code stored
   there is executed and provides root privileges. cite:rev,vuln
   
* Response to /zergRush/
  Because the entirety of /zergRush's/ exploit was founded on its ability to
  exploit a buffer overflow vulnerability, Google's response was targeted at
  this. cite:diff A bounds-check was added to the copying of the user's input to
  make sure that their input did not cause a buffer overflow. cite:diff In the
  case that an overflow happened, the program would notify the user that they
  had exceeded the length of the buffer and cease execution. cite:diff Though
  the use-after-free vulnerability remained, the ability to overwrite the return
  pointer to access the arbitrary code on the heap was removed making the
  exploit ineffective. cite:diff
  
* Conclusion
  The classic buffer overflow vulnerability allowed /zergRush/ to be successful
  in exploiting the Android operating system. cite:issue,vuln,email Its ability
  to overwrite the stack and modify the return pointer with ROP gadgets allowed
  it to gain control of the program execution, and its exploitation of the
  use-after-free vulnerability and ability to write to the heap allowed it to
  insert arbitrary code. cite:rev These exploits, when coupled, provided the
  user the ability to gain root privileges to the system, making it an effective
  rootkit. cite:email,sec

#+BEGIN_EXPORT latex
\printbibliography
#+END_EXPORT
